(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{352:function(t,s,n){"use strict";n.r(s);var a=n(28),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_10-7-类型的-string-方法和格式化描述符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-7-类型的-string-方法和格式化描述符"}},[t._v("#")]),t._v(" 10.7 类型的 String() 方法和格式化描述符")]),t._v(" "),n("p",[t._v("当定义了一个有很多方法的类型时，十之八九你会使用 "),n("code",[t._v("String()")]),t._v(" 方法来定制类型的字符串形式的输出，换句话说：一种可阅读性和打印性的输出。如果类型定义了 "),n("code",[t._v("String()")]),t._v(" 方法，它会被用在 "),n("code",[t._v("fmt.Printf()")]),t._v(" 中生成默认的输出：等同于使用格式化描述符 "),n("code",[t._v("%v")]),t._v(" 产生的输出。还有 "),n("code",[t._v("fmt.Print()")]),t._v(" 和 "),n("code",[t._v("fmt.Println()")]),t._v(" 也会自动使用 "),n("code",[t._v("String()")]),t._v(" 方法。")]),t._v(" "),n("p",[t._v("我们使用第 10.4 节中程序的类型来进行测试：")]),t._v(" "),n("p",[t._v("示例 10.22 method_string.go：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"strconv"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" TwoInts "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\tb "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttwo1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TwoInts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ttwo1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n\ttwo1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two1 is: %v\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two1 is:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two1 is: %T\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two1 is: %#v\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("TwoInts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"("')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" strconv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Itoa")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" strconv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Itoa")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('")"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("输出：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("two1 is: (12/10)\ntwo1 is: (12/10)\ntwo1 is: *main.TwoInts\ntwo1 is: &main.TwoInts{a:12, b:10}\n")])])]),n("p",[t._v("当你广泛使用一个自定义类型时，最好为它定义 "),n("code",[t._v("String()")]),t._v("方法。从上面的例子也可以看到，格式化描述符 "),n("code",[t._v("%T")]),t._v(" 会给出类型的完全规格，"),n("code",[t._v("%#v")]),t._v(" 会给出实例的完整输出，包括它的字段（在程序自动生成 "),n("code",[t._v("Go")]),t._v(" 代码时也很有用）。")]),t._v(" "),n("p",[n("strong",[t._v("备注")])]),t._v(" "),n("p",[t._v("不要在 "),n("code",[t._v("String()")]),t._v(" 方法里面调用涉及 "),n("code",[t._v("String()")]),t._v(" 方法的方法，它会导致意料之外的错误，比如下面的例子，它导致了一个无限递归调用（"),n("code",[t._v("TT.String()")]),t._v(" 调用 "),n("code",[t._v("fmt.Sprintf")]),t._v("，而 "),n("code",[t._v("fmt.Sprintf")]),t._v(" 又会反过来调用 "),n("code",[t._v("TT.String()")]),t._v("...），很快就会导致内存溢出：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" TT "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t TT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%v"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("strong",[t._v("练习 10.12")]),t._v(" type_string.go")]),t._v(" "),n("p",[t._v("给定结构体类型 T:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" T "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n    b "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v("\n    c "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("值 "),n("code",[t._v("t")]),t._v(": "),n("code",[t._v('t := &T{7, -2.35, "abc\\tdef"}')]),t._v("。给 T 定义 "),n("code",[t._v("String()")]),t._v("，使得 "),n("code",[t._v('fmt.Printf("%v\\n", t)')]),t._v(" 输出："),n("code",[t._v('7 / -2.350000 / "abc\\tdef"')]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("练习 10.13")]),t._v(" celsius.go")]),t._v(" "),n("p",[t._v("为 float64 定义一个别名类型 "),n("code",[t._v("Celsius")]),t._v("，并给它定义 "),n("code",[t._v("String()")]),t._v("，它输出一个十进制数和 °C 表示的温度值。")]),t._v(" "),n("p",[n("strong",[t._v("练习 10.14")]),t._v(" days.go")]),t._v(" "),n("p",[t._v("为 int 定义一个别名类型 "),n("code",[t._v("Day")]),t._v("，定义一个字符串数组它包含一周七天的名字，为类型 "),n("code",[t._v("Day")]),t._v(" 定义 "),n("code",[t._v("String()")]),t._v(" 方法，它输出星期几的名字。使用 "),n("code",[t._v("iota")]),t._v(" 定义一个枚举常量用于表示一周的中每天（MO、TU...）。")]),t._v(" "),n("p",[n("strong",[t._v("练习 10.15")]),t._v(" timezones.go")]),t._v(" "),n("p",[t._v("为 int 定义别名类型 "),n("code",[t._v("TZ")]),t._v("，定义一些常量表示时区，比如 UTC，定义一个 map，它将时区的缩写映射为它的全称，比如："),n("code",[t._v('UTC -> "Universal Greenwich time"')]),t._v("。为类型 "),n("code",[t._v("TZ")]),t._v(" 定义 "),n("code",[t._v("String()")]),t._v(" 方法，它输出时区的全称。")]),t._v(" "),n("p",[n("strong",[t._v("练习 10.16")]),t._v(" stack_arr.go/stack_struct.go")]),t._v(" "),n("p",[t._v("实现栈（stack）数据结构：")]),t._v(" "),n("p",[n("img",{attrs:{src:"images/10.7_fig.jpg?raw=true",alt:""}})]),t._v(" "),n("p",[t._v("它的格子包含数据，比如整数 i、j、k 和 l 等等，格子从底部（索引 0）至顶部（索引 n）来索引。这个例子中假定 "),n("code",[t._v("n=3")]),t._v("，那么一共有 4 个格子。")]),t._v(" "),n("p",[t._v("一个新栈中所有格子的值都是 0。")]),t._v(" "),n("p",[t._v("将一个新值放到栈的最顶部一个空（包括零）的格子中，这叫做"),n("code",[t._v("push")]),t._v("。")]),t._v(" "),n("p",[t._v("获取栈的最顶部一个非空（非零）的格子的值，这叫做"),n("code",[t._v("pop")]),t._v("。\n现在可以理解为什么栈是一个后进先出（LIFO）的结构了吧。")]),t._v(" "),n("p",[t._v("为栈定义一个"),n("code",[t._v("Stack")]),t._v(" 类型，并为它定义 "),n("code",[t._v("Push")]),t._v(" 和 "),n("code",[t._v("Pop")]),t._v(" 方法，再为它定义 "),n("code",[t._v("String()")]),t._v(" 方法（用于调试）输出栈的内容，比如："),n("code",[t._v("[0:i] [1:j] [2:k] [3:l]")]),t._v("。")]),t._v(" "),n("p",[t._v("1）stack_arr.go：使用长度为 4 的 int 数组作为底层数据结构。")]),t._v(" "),n("p",[t._v("2）stack_struct.go：使用包含一个索引和一个 int 数组的结构体作为底层数据结构，索引表示第一个空闲的位置。")]),t._v(" "),n("p",[t._v("3）使用常量 LIMIT 代替上面表示元素个数的 4 重新实现上面的 1）和 2），使它们更具有一般性。")]),t._v(" "),n("h2",{attrs:{id:"链接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),n("ul",[n("li",[n("RouterLink",{attrs:{to:"/go-doc/directory.html"}},[t._v("目录")])],1),t._v(" "),n("li",[t._v("上一节："),n("RouterLink",{attrs:{to:"/go-doc/10.6.html"}},[t._v("方法")])],1),t._v(" "),n("li",[t._v("下一节："),n("RouterLink",{attrs:{to:"/go-doc/10.8.html"}},[t._v("垃圾回收和 SetFinalizer")])],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);
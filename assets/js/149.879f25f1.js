(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{392:function(t,o,r){"use strict";r.r(o);var e=r(28),n=Object(e.a)({},(function(){var t=this,o=t.$createElement,r=t._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"_14-协程（goroutine）与通道（channel）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14-协程（goroutine）与通道（channel）"}},[t._v("#")]),t._v(" 14 协程（goroutine）与通道（channel）")]),t._v(" "),r("p",[t._v("作为一门 21 世纪的语言，Go 原生支持应用之间的通信（网络，客户端和服务端，分布式计算，参见第 15 章）和程序的并发。程序可以在不同的处理器和计算机上同时执行不同的代码段。Go 语言为构建并发程序的基本代码块是 协程 (goroutine) 与通道 (channel)。他们需要语言，编译器，和runtime的支持。Go 语言提供的垃圾回收器对并发编程至关重要。")]),t._v(" "),r("p",[r("strong",[t._v("不要通过共享内存来通信，而通过通信来共享内存。")])]),t._v(" "),r("p",[t._v("通信强制协作。")]),t._v(" "),r("h2",{attrs:{id:"链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/go-doc/directory.html"}},[t._v("目录")])],1),t._v(" "),r("li",[t._v("上一节："),r("RouterLink",{attrs:{to:"/go-doc/13.10.html"}},[t._v("性能调试：分析并优化 Go 程序")])],1),t._v(" "),r("li",[t._v("下一节："),r("RouterLink",{attrs:{to:"/go-doc/14.1.html"}},[t._v("并发、并行和协程")])],1)])])}),[],!1,null,null,null);o.default=n.exports}}]);
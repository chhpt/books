(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{266:function(t,r,e){"use strict";e.r(r);var v=e(28),a=Object(v.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"第二部分：-分布式数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二部分：-分布式数据"}},[t._v("#")]),t._v(" 第二部分： 分布式数据")]),t._v(" "),e("blockquote",[e("p",[t._v("一个成功的技术，现实的优先级必须高于公关，你可以糊弄别人，但糊弄不了自然规律。")]),t._v(" "),e("p",[t._v("——罗杰斯委员会报告（1986）")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("在本书的"),e("RouterLink",{attrs:{to:"/ddia/part-i.html"}},[t._v("第一部分")]),t._v("中，我们讨论了数据系统的各个方面，但仅限于数据存储在单台机器上的情况。现在我们到了"),e("RouterLink",{attrs:{to:"/ddia/part-ii.html"}},[t._v("第二部分")]),t._v("，进入更高的层次，并提出一个问题：如果"),e("strong",[t._v("多台机器")]),t._v("参与数据的存储和检索，会发生什么？")],1),t._v(" "),e("p",[t._v("你可能会出于各种各样的原因，希望将数据库分布到多台机器上：")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("可扩展性")])])]),t._v(" "),e("p",[t._v("如果你的数据量、读取负载、写入负载超出单台机器的处理能力，可以将负载分散到多台计算机上。")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("容错/高可用性")])])]),t._v(" "),e("p",[t._v("如果你的应用需要在单台机器（或多台机器，网络或整个数据中心）出现故障的情况下仍然能继续工作，则可使用多台机器，以提供冗余。一台故障时，另一台可以接管。")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("延迟")])])]),t._v(" "),e("p",[t._v("如果在世界各地都有用户，你也许会考虑在全球范围部署多个服务器，从而每个用户可以从地理上最近的数据中心获取服务，避免了等待网络数据包穿越半个世界。")]),t._v(" "),e("h3",{attrs:{id:"扩展至更高的载荷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展至更高的载荷"}},[t._v("#")]),t._v(" 扩展至更高的载荷")]),t._v(" "),e("p",[t._v("如果你需要的只是扩展至更高的"),e("strong",[t._v("载荷（load）")]),t._v("，最简单的方法就是购买更强大的机器（有时称为"),e("strong",[t._v("垂直扩展（vertical scaling）"),e("strong",[t._v("或")]),t._v("向上扩展（scale up）")]),t._v("）。许多处理器，内存和磁盘可以在同一个操作系统下相互连接，快速的相互连接允许任意处理器访问内存或磁盘的任意部分。在这种**共享内存架构（shared-memory architecture）**中，所有的组件都可以看作一台单独的机器。")]),t._v(" "),e("p",[t._v("[^i]: 在大型机中，尽管任意处理器都可以访问内存的任意部分，但总有一些内存区域与一些处理器更接近（称为"),e("strong",[t._v("非均匀内存访问（nonuniform memory access, NUMA）")]),t._v("【1】）。 为了有效利用这种架构特性，需要对处理进行细分，以便每个处理器主要访问临近的内存，这意味着即使表面上看起来只有一台机器在运行，**分区（partitioning）**仍然是必要的。")]),t._v(" "),e("p",[t._v("共享内存方法的问题在于，成本增长速度快于线性增长：一台有着双倍处理器数量，双倍内存大小，双倍磁盘容量的机器，通常成本会远远超过原来的两倍。而且可能因为存在瓶颈，并不足以处理双倍的载荷。")]),t._v(" "),e("p",[t._v("共享内存架构可以提供有限的容错能力，高端机器可以使用热插拔的组件（不关机更换磁盘，内存模块，甚至处理器）——但它必然囿于单个地理位置的桎梏。")]),t._v(" "),e("p",[t._v("另一种方法是"),e("strong",[t._v("共享磁盘架构（shared-disk architecture）")]),t._v("，它使用多台具有独立处理器和内存的机器，但将数据存储在机器之间共享的磁盘阵列上，这些磁盘通过快速网络连接[^ii]。这种架构用于某些数据仓库，但竞争和锁定的开销限制了共享磁盘方法的可扩展性【2】。")]),t._v(" "),e("p",[t._v("[^ii]: 网络附属存储（Network Attached Storage, NAS），或"),e("strong",[t._v("存储区网络（Storage Area Network, SAN）")])]),t._v(" "),e("h4",{attrs:{id:"无共享架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无共享架构"}},[t._v("#")]),t._v(" 无共享架构")]),t._v(" "),e("p",[t._v("相比之下，"),e("strong",[t._v("无共享架构（shared-nothing architecture）")]),t._v("（有时称为"),e("strong",[t._v("水平扩展（horizontal scale）")]),t._v(" 或"),e("strong",[t._v("向外扩展（scale out）")]),t._v("）已经相当普及。在这种架构中，运行数据库软件的每台机器/虚拟机都称为"),e("strong",[t._v("节点（node）")]),t._v("。每个节点只使用各自的处理器，内存和磁盘。节点之间的任何协调，都是在软件层面使用传统网络实现的。")]),t._v(" "),e("p",[t._v("无共享系统不需要使用特殊的硬件，所以你可以用任意机器——比如性价比最好的机器。你也许可以跨多个地理区域分布数据从而减少用户延迟，或者在损失一整个数据中心的情况下幸免于难。随着云端虚拟机部署的出现，即使是小公司，现在无需Google级别的运维，也可以实现异地分布式架构。")]),t._v(" "),e("p",[t._v("在这一部分里，我们将重点放在无共享架构上。它不见得是所有场景的最佳选择，但它是最需要你谨慎从事的架构。如果你的数据分布在多个节点上，你需要意识到这样一个分布式系统中约束和权衡 ——数据库并不能魔术般地把这些东西隐藏起来。")]),t._v(" "),e("p",[t._v("虽然分布式无共享架构有许多优点，但它通常也会给应用带来额外的复杂度，有时也会限制你可用数据模型的表达力。在某些情况下，一个简单的单线程程序可以比一个拥有超过100个CPU核的集群表现得更好【4】。另一方面，无共享系统可以非常强大。接下来的几章，将详细讨论分布式数据会带来的问题。")]),t._v(" "),e("h3",{attrs:{id:"复制-vs-分区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制-vs-分区"}},[t._v("#")]),t._v(" 复制 vs 分区")]),t._v(" "),e("p",[t._v("数据分布在多个节点上有两种常见的方式：")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("复制（Replication）")])])]),t._v(" "),e("p",[t._v("​\t在几个不同的节点上保存数据的相同副本，可能放在不同的位置。 复制提供了冗余：如果一些节点不可用，剩余的节点仍然可以提供数据服务。 复制也有助于改善性能。 "),e("RouterLink",{attrs:{to:"/ddia/ch5.html"}},[t._v("第五章")]),t._v("将讨论复制。")],1),t._v(" "),e("p",[e("em",[e("strong",[t._v("分区 (Partitioning)")])])]),t._v(" "),e("p",[t._v("​\t将一个大型数据库拆分成较小的子集（称为"),e("strong",[t._v("分区（partitions）")]),t._v("），从而不同的分区可以指派给不同的"),e("strong",[t._v("节点（node）")]),t._v("（亦称"),e("strong",[t._v("分片（shard）")]),t._v("）。 "),e("RouterLink",{attrs:{to:"/ddia/ch6.html"}},[t._v("第六章")]),t._v("将讨论分区。")],1),t._v(" "),e("p",[t._v("复制和分区是不同的机制，但它们经常同时使用。如"),e("a",{attrs:{href:"img/figii-1.png"}},[t._v("图II-1")]),t._v("所示。")]),t._v(" "),e("p",[e("img",{attrs:{src:"img/figii-1.png",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("图II-1 一个数据库切分为两个分区，每个分区都有两个副本")])]),t._v(" "),e("p",[t._v("理解了这些概念，就可以开始讨论在分布式系统中需要做出的困难抉择。"),e("RouterLink",{attrs:{to:"/ddia/ch7.html"}},[t._v("第七章")]),t._v("将讨论"),e("strong",[t._v("事务(Transaction)")]),t._v("，这对于了解数据系统中可能出现的各种问题，以及我们可以做些什么很有帮助。"),e("RouterLink",{attrs:{to:"/ddia/ch8.html"}},[t._v("第八章")]),t._v("和"),e("RouterLink",{attrs:{to:"/ddia/ch9.html"}},[t._v("第九章")]),t._v("将讨论分布式系统的根本局限性。")],1),t._v(" "),e("p",[t._v("在本书的"),e("RouterLink",{attrs:{to:"/ddia/part-iii.html"}},[t._v("第三部分")]),t._v("中，将讨论如何将多个（可能是分布式的）数据存储集成为一个更大的系统，以满足复杂的应用需求。 但首先，我们来聊聊分布式的数据。")],1),t._v(" "),e("h2",{attrs:{id:"索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[e("RouterLink",{attrs:{to:"/ddia/ch5.html"}},[t._v("复制")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ddia/ch6.html"}},[t._v("分片")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ddia/ch7.html"}},[t._v("事务")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ddia/ch8.html"}},[t._v("分布式系统的麻烦")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ddia/ch9.html"}},[t._v("一致性与共识")])],1)]),t._v(" "),e("h2",{attrs:{id:"参考文献"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("Ulrich Drepper: “"),e("a",{attrs:{href:"https://people.freebsd.org/~lstewart/articles/cpumemory.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("What Every Programmer Should Know About Memory"),e("OutboundLink")],1),t._v(",” akka‐dia.org, November 21, 2007.")])]),t._v(" "),e("li",[e("p",[t._v("Ben Stopford: “"),e("a",{attrs:{href:"http://www.benstopford.com/2009/11/24/understanding-the-shared-nothing-architecture/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shared Nothing vs. Shared Disk Architectures: An Independent View"),e("OutboundLink")],1),t._v(",” benstopford.com, November 24, 2009.")])]),t._v(" "),e("li",[e("p",[t._v("Michael Stonebraker: “"),e("a",{attrs:{href:"http://db.cs.berkeley.edu/papers/hpts85-nothing.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Case for Shared Nothing"),e("OutboundLink")],1),t._v(",” IEEE Database EngineeringBulletin, volume 9, number 1, pages 4–9, March 1986.")])]),t._v(" "),e("li",[e("p",[t._v("Frank McSherry, Michael Isard, and Derek G. Murray: “"),e("a",{attrs:{href:"http://www.frankmcsherry.org/assets/COST.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scalability! But at What COST?"),e("OutboundLink")],1),t._v(",” at 15th USENIX Workshop on Hot Topics in Operating Systems (HotOS),May 2015.")])])]),t._v(" "),e("hr"),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("上一章")]),t._v(" "),e("th",[t._v("目录")]),t._v(" "),e("th",[t._v("下一章")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("RouterLink",{attrs:{to:"/ddia/ch4.html"}},[t._v("第四章：编码与演化")])],1),t._v(" "),e("td",[e("RouterLink",{attrs:{to:"/ddia/"}},[t._v("设计数据密集型应用")])],1),t._v(" "),e("td",[e("RouterLink",{attrs:{to:"/ddia/ch5.html"}},[t._v("第五章：复制")])],1)])])])])}),[],!1,null,null,null);r.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{353:function(t,a,s){"use strict";s.r(a);var n=s(28),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_10-8-垃圾回收和-setfinalizer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-8-垃圾回收和-setfinalizer"}},[t._v("#")]),t._v(" 10.8 垃圾回收和 SetFinalizer")]),t._v(" "),s("p",[t._v("Go 开发者不需要写代码来释放程序中不再使用的变量和结构占用的内存，在 Go 运行时中有一个独立的进程，即垃圾收集器（GC），会处理这些事情，它搜索不再使用的变量然后释放它们的内存。可以通过 "),s("code",[t._v("runtime")]),t._v(" 包访问 GC 进程。")]),t._v(" "),s("p",[t._v("通过调用 "),s("code",[t._v("runtime.GC()")]),t._v(" 函数可以显式的触发 GC，但这只在某些罕见的场景下才有用，比如当内存资源不足时调用 "),s("code",[t._v("runtime.GC()")]),t._v("，它会在此函数执行的点上立即释放一大片内存，此时程序可能会有短时的性能下降（因为 "),s("code",[t._v("GC")]),t._v(" 进程在执行）。")]),t._v(" "),s("p",[t._v("如果想知道当前的内存状态，可以使用：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// fmt.Printf("%d\\n", runtime.MemStats.Alloc/1024)')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此处代码在 Go 1.5.1下不再有效，更正为")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m runtime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MemStats\nruntime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReadMemStats")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d Kb\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Alloc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面的程序会给出已分配内存的总量，单位是 Kb。进一步的测量参考 "),s("a",{attrs:{href:"http://golang.org/pkg/runtime/#MemStatsType",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档页面"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("如果需要在一个对象 obj 被从内存移除前执行一些特殊操作，比如写到日志文件中，可以通过如下方式调用函数来实现：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("runtime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetFinalizer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("typeObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("func(obj *typeObj)")]),t._v(" 需要一个 "),s("code",[t._v("typeObj")]),t._v(" 类型的指针参数 "),s("code",[t._v("obj")]),t._v("，特殊操作会在它上面执行。"),s("code",[t._v("func")]),t._v(" 也可以是一个匿名函数。")]),t._v(" "),s("p",[t._v("在对象被 GC 进程选中并从内存中移除以前，"),s("code",[t._v("SetFinalizer")]),t._v(" 都不会执行，即使程序正常结束或者发生错误。")]),t._v(" "),s("p",[s("strong",[t._v("练习 10.17")])]),t._v(" "),s("p",[t._v("从练习 10.16 开始（它基于结构体实现了一个栈结构），为栈的实现（stack_struct.go）创建一个单独的包 "),s("code",[t._v("stack")]),t._v("，并从 "),s("code",[t._v("main")]),t._v(" 包 "),s("code",[t._v("main.stack.go")]),t._v(" 中调用它。")]),t._v(" "),s("h2",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/go-doc/directory.html"}},[t._v("目录")])],1),t._v(" "),s("li",[t._v("上一节："),s("RouterLink",{attrs:{to:"/go-doc/10.7.html"}},[t._v("类型的 String() 方法和格式化描述符")])],1),t._v(" "),s("li",[t._v("下一章："),s("RouterLink",{attrs:{to:"/go-doc/11.0.html"}},[t._v("接口（Interfaces）与反射（reflection）")])],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);
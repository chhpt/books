(window.webpackJsonp=window.webpackJsonp||[]).push([[216],{458:function(t,a,s){"use strict";s.r(a);var e=s(28),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"版本-4-用-json-持久化存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本-4-用-json-持久化存储"}},[t._v("#")]),t._v(" 版本 4 - 用 JSON 持久化存储")]),t._v(" "),s("p",[t._v("第 4 个版本的代码 "),s("em",[t._v("goto_v4")]),t._v(" 见 "),s("a",{attrs:{href:"examples/chapter_19/goto_v4"}},[t._v("goto_v4")]),t._v("。")]),t._v(" "),s("h1",{attrs:{id:"_19-7-以-json-格式存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-7-以-json-格式存储"}},[t._v("#")]),t._v(" 19.7 以 json 格式存储")]),t._v(" "),s("p",[t._v("如果你是个敏锐的测试者也许已经注意到了，当 goto 程序启动 2 次，第 2 次启动后能读取短 URL 且完美地工作。然而从第 3 次开始，会得到错误：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("Error loading URLStore: extra data in buffer\n")])])]),s("p",[t._v("这是由于 gob 是基于流的协议，它不支持重新开始。为补救该问题，这里我们使用 json 作为存储协议（见 "),s("RouterLink",{attrs:{to:"/go-doc/12.9.html"}},[t._v("12.9 节")]),t._v("），它以纯文本形式存储数据，因此也可以被非 Go 语言编写的进程读取。同时也显示了更换一种不同的持久化协议是多么简单，因为与存储打交道的代码被清晰地隔离在 2 个方法中，即 "),s("code",[t._v("load")]),t._v(" 和 "),s("code",[t._v("saveLoop")]),t._v("。")],1),t._v(" "),s("p",[t._v("从创建新的空文件 store.json 开始，更改 main.go 中声明文件名变量的那一行：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" dataFile "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"store.json"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data store file name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在 store.go 中导入 "),s("code",[t._v("json")]),t._v(" 取代 "),s("code",[t._v("gob")]),t._v("。然后在 "),s("code",[t._v("saveLoop")]),t._v(" 中唯一需要被修改的行：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" gob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewEncoder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("更改为：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewEncoder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("类似的，在 "),s("code",[t._v("load")]),t._v(" 方法中：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" gob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewDecoder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("修改为：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewDecoder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这就是所有要改动的地方！编译，启动并测试，你会发现之前的错误不会再发生了。")]),t._v(" "),s("h2",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/go-doc/directory.html"}},[t._v("目录")])],1),t._v(" "),s("li",[t._v("上一节："),s("RouterLink",{attrs:{to:"/go-doc/19.6.html"}},[t._v("用协程优化性能")])],1),t._v(" "),s("li",[t._v("下一节："),s("RouterLink",{attrs:{to:"/go-doc/19.8.html"}},[t._v("多服务器处理架构")])],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);